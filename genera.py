# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_genera', [dirname(__file__)])
        except ImportError:
            import _genera
            return _genera
        if fp is not None:
            try:
                _mod = imp.load_module('_genera', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _genera = swig_import_helper()
    del swig_import_helper
else:
    import _genera
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


NULL = _genera.NULL
PI = _genera.PI
SQRT2 = _genera.SQRT2
DELTA = _genera.DELTA
GRADIENT_ID = _genera.GRADIENT_ID
CURVE_ID = _genera.CURVE_ID
TEXTURE_ID = _genera.TEXTURE_ID
MODEL_ID = _genera.MODEL_ID
PARAMETER_ID = _genera.PARAMETER_ID
SCENE_ID = _genera.SCENE_ID
UNKNOWN_ID = _genera.UNKNOWN_ID
class Component(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Component, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Component, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _genera.new_Component()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genera.delete_Component
    __del__ = lambda self : None;
    def generate(self): return _genera.Component_generate(self)
    def loadData(self, *args): return _genera.Component_loadData(self, *args)
    def getName(self): return _genera.Component_getName(self)
    def setName(self, *args): return _genera.Component_setName(self, *args)
    def getGenerated(self): return _genera.Component_getGenerated(self)
    def setType(self, *args): return _genera.Component_setType(self, *args)
    def getType(self): return _genera.Component_getType(self)
    def nameIs(self, *args): return _genera.Component_nameIs(self, *args)
    def readString(self, *args): return _genera.Component_readString(self, *args)
Component_swigregister = _genera.Component_swigregister
Component_swigregister(Component)

class Gradient(Component):
    __swig_setmethods__ = {}
    for _s in [Component]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gradient, name, value)
    __swig_getmethods__ = {}
    for _s in [Component]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Gradient, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _genera.new_Gradient()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genera.delete_Gradient
    __del__ = lambda self : None;
    def loadData(self, *args): return _genera.Gradient_loadData(self, *args)
    def getColorAt(self, *args): return _genera.Gradient_getColorAt(self, *args)
Gradient_swigregister = _genera.Gradient_swigregister
Gradient_swigregister(Gradient)

class Curve(Component):
    __swig_setmethods__ = {}
    for _s in [Component]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Curve, name, value)
    __swig_getmethods__ = {}
    for _s in [Component]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Curve, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _genera.new_Curve()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genera.delete_Curve
    __del__ = lambda self : None;
    def loadData(self, *args): return _genera.Curve_loadData(self, *args)
    def getFilled(self): return _genera.Curve_getFilled(self)
    def getNumberOfPoints(self): return _genera.Curve_getNumberOfPoints(self)
    def getSegmentsPerCurve(self): return _genera.Curve_getSegmentsPerCurve(self)
    def getLineWidth(self): return _genera.Curve_getLineWidth(self)
    def getVisible(self, *args): return _genera.Curve_getVisible(self, *args)
    def getEndPoint(self, *args): return _genera.Curve_getEndPoint(self, *args)
    def getControlPoint(self, *args): return _genera.Curve_getControlPoint(self, *args)
    def getLeftTangent(self, *args): return _genera.Curve_getLeftTangent(self, *args)
    def getRightTangent(self, *args): return _genera.Curve_getRightTangent(self, *args)
    def generate(self): return _genera.Curve_generate(self)
Curve_swigregister = _genera.Curve_swigregister
Curve_swigregister(Curve)

TEXTURE_FX_ON = _genera.TEXTURE_FX_ON
TEXTURE_FX_TYPE = _genera.TEXTURE_FX_TYPE
DESTINATION_LAYER = _genera.DESTINATION_LAYER
SOURCE_LAYER = _genera.SOURCE_LAYER
WIDTH = _genera.WIDTH
HEIGHT = _genera.HEIGHT
SCALE_X = _genera.SCALE_X
SCALE_Y = _genera.SCALE_Y
HORIZONTAL = _genera.HORIZONTAL
VERTICAL = _genera.VERTICAL
DIRECTION = _genera.DIRECTION
EMBOSS_VAL = _genera.EMBOSS_VAL
POSTERIZE_VAL = _genera.POSTERIZE_VAL
TEXTURE_LAYER = _genera.TEXTURE_LAYER
MASK_LAYER = _genera.MASK_LAYER
CHECKER = _genera.CHECKER
CURVE = _genera.CURVE
FRACTAL = _genera.FRACTAL
GLOW = _genera.GLOW
NOISE = _genera.NOISE
PICTURE = _genera.PICTURE
SINUS = _genera.SINUS
FLIP = _genera.FLIP
GLASS = _genera.GLASS
MOVE = _genera.MOVE
PIXELLATE = _genera.PIXELLATE
RANDOMIZE = _genera.RANDOMIZE
ROTATE = _genera.ROTATE
SCALE = _genera.SCALE
SPHERE_MAPPING = _genera.SPHERE_MAPPING
TILE = _genera.TILE
TWIRL = _genera.TWIRL
BRIGHTNESS = _genera.BRIGHTNESS
BUMP = _genera.BUMP
BUMP_MORE = _genera.BUMP_MORE
CONTRAST = _genera.CONTRAST
EDGE_DETECT = _genera.EDGE_DETECT
EMBOSS = _genera.EMBOSS
GRAYSCALE = _genera.GRAYSCALE
INVERSE = _genera.INVERSE
POSTERIZE = _genera.POSTERIZE
SHARPEN = _genera.SHARPEN
THRESHOLD = _genera.THRESHOLD
FAST_BLUR = _genera.FAST_BLUR
FAST_HORIZONTAL_BLUR = _genera.FAST_HORIZONTAL_BLUR
FAST_VERTICAL_BLUR = _genera.FAST_VERTICAL_BLUR
GAUSSIAN_BLUR = _genera.GAUSSIAN_BLUR
GAUSSIAN_HORIZONTAL_BLUR = _genera.GAUSSIAN_HORIZONTAL_BLUR
GAUSSIAN_VERTICAL_BLUR = _genera.GAUSSIAN_VERTICAL_BLUR
LINE_BLUR = _genera.LINE_BLUR
ADD = _genera.ADD
COPY = _genera.COPY
DIRECTIONAL_BLUR = _genera.DIRECTIONAL_BLUR
ENVIRONMENT = _genera.ENVIRONMENT
MIX = _genera.MIX
MUL = _genera.MUL
RANDOM_DUMP = _genera.RANDOM_DUMP
SHADE = _genera.SHADE
SUB = _genera.SUB
XOR = _genera.XOR
TEXTURE_CURVE = _genera.TEXTURE_CURVE
class Texture(Component):
    __swig_setmethods__ = {}
    for _s in [Component]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Texture, name, value)
    __swig_getmethods__ = {}
    for _s in [Component]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Texture, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _genera.new_Texture()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genera.delete_Texture
    __del__ = lambda self : None;
    def setGenerator(self, *args): return _genera.Texture_setGenerator(self, *args)
    def loadData(self, *args): return _genera.Texture_loadData(self, *args)
    def generate(self): return _genera.Texture_generate(self)
    def getLayer(self, *args): return _genera.Texture_getLayer(self, *args)
    def getTexture(self): return _genera.Texture_getTexture(self)
    def checker(self, *args): return _genera.Texture_checker(self, *args)
    def curve(self, *args): return _genera.Texture_curve(self, *args)
    def fractal(self, *args): return _genera.Texture_fractal(self, *args)
    def glow(self, *args): return _genera.Texture_glow(self, *args)
    def noise(self, *args): return _genera.Texture_noise(self, *args)
    def picture(self, *args): return _genera.Texture_picture(self, *args)
    def sinus(self, *args): return _genera.Texture_sinus(self, *args)
    def flip(self, *args): return _genera.Texture_flip(self, *args)
    def glass(self, *args): return _genera.Texture_glass(self, *args)
    def move(self, *args): return _genera.Texture_move(self, *args)
    def pixellate(self, *args): return _genera.Texture_pixellate(self, *args)
    def randomize(self, *args): return _genera.Texture_randomize(self, *args)
    def rotate(self, *args): return _genera.Texture_rotate(self, *args)
    def scale(self, *args): return _genera.Texture_scale(self, *args)
    def sphereMapping(self, *args): return _genera.Texture_sphereMapping(self, *args)
    def tile(self, *args): return _genera.Texture_tile(self, *args)
    def twirl(self, *args): return _genera.Texture_twirl(self, *args)
    def brightness(self, *args): return _genera.Texture_brightness(self, *args)
    def bump(self, *args): return _genera.Texture_bump(self, *args)
    def bumpMore(self, *args): return _genera.Texture_bumpMore(self, *args)
    def contrast(self, *args): return _genera.Texture_contrast(self, *args)
    def edgeDetect(self, *args): return _genera.Texture_edgeDetect(self, *args)
    def emboss(self, *args): return _genera.Texture_emboss(self, *args)
    def grayscale(self, *args): return _genera.Texture_grayscale(self, *args)
    def inverse(self, *args): return _genera.Texture_inverse(self, *args)
    def posterize(self, *args): return _genera.Texture_posterize(self, *args)
    def sharpen(self, *args): return _genera.Texture_sharpen(self, *args)
    def threshold(self, *args): return _genera.Texture_threshold(self, *args)
    def fastBlur(self, *args): return _genera.Texture_fastBlur(self, *args)
    def fastHorizontalBlur(self, *args): return _genera.Texture_fastHorizontalBlur(self, *args)
    def fastVerticalBlur(self, *args): return _genera.Texture_fastVerticalBlur(self, *args)
    def gaussianBlur(self, *args): return _genera.Texture_gaussianBlur(self, *args)
    def gaussianHorizontalBlur(self, *args): return _genera.Texture_gaussianHorizontalBlur(self, *args)
    def gaussianVerticalBlur(self, *args): return _genera.Texture_gaussianVerticalBlur(self, *args)
    def lineBlur(self, *args): return _genera.Texture_lineBlur(self, *args)
    def add(self, *args): return _genera.Texture_add(self, *args)
    def copy(self, *args): return _genera.Texture_copy(self, *args)
    def directionalBlur(self, *args): return _genera.Texture_directionalBlur(self, *args)
    def environment(self, *args): return _genera.Texture_environment(self, *args)
    def mix(self, *args): return _genera.Texture_mix(self, *args)
    def mul(self, *args): return _genera.Texture_mul(self, *args)
    def randomDump(self, *args): return _genera.Texture_randomDump(self, *args)
    def shade(self, *args): return _genera.Texture_shade(self, *args)
    def sub(self, *args): return _genera.Texture_sub(self, *args)
    def xclor(self, *args): return _genera.Texture_xclor(self, *args)
    def textureCurve(self, *args): return _genera.Texture_textureCurve(self, *args)
Texture_swigregister = _genera.Texture_swigregister
Texture_swigregister(Texture)

MODEL_FX_ON = _genera.MODEL_FX_ON
MODEL_FX_TYPE = _genera.MODEL_FX_TYPE
CUBE = _genera.CUBE
CYLINDER = _genera.CYLINDER
EXTRUDE_CURVE = _genera.EXTRUDE_CURVE
HEIGHT_FIELD = _genera.HEIGHT_FIELD
METABALL = _genera.METABALL
OCTAHEDRON = _genera.OCTAHEDRON
SPHERE = _genera.SPHERE
STAR = _genera.STAR
SWEEP_CURVE = _genera.SWEEP_CURVE
TORUS = _genera.TORUS
HEIGHT_MAP = _genera.HEIGHT_MAP
MOVE_OBJECT = _genera.MOVE_OBJECT
NOISE_OBJECT = _genera.NOISE_OBJECT
REFINE = _genera.REFINE
ROTATE_OBJECT = _genera.ROTATE_OBJECT
SCALE_OBJECT = _genera.SCALE_OBJECT
SPHERIZE = _genera.SPHERIZE
TAPER = _genera.TAPER
TESSELLATE = _genera.TESSELLATE
TWIST_OBJECT = _genera.TWIST_OBJECT
ENVIRONMENT_MAP = _genera.ENVIRONMENT_MAP
TEXTURE_MAP = _genera.TEXTURE_MAP
class Texel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Texel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Texel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["u"] = _genera.Texel_u_set
    __swig_getmethods__["u"] = _genera.Texel_u_get
    if _newclass:u = _swig_property(_genera.Texel_u_get, _genera.Texel_u_set)
    __swig_setmethods__["v"] = _genera.Texel_v_set
    __swig_getmethods__["v"] = _genera.Texel_v_get
    if _newclass:v = _swig_property(_genera.Texel_v_get, _genera.Texel_v_set)
    def __init__(self): 
        this = _genera.new_Texel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genera.delete_Texel
    __del__ = lambda self : None;
Texel_swigregister = _genera.Texel_swigregister
Texel_swigregister(Texel)

class Face(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Face, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Face, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vertex1"] = _genera.Face_vertex1_set
    __swig_getmethods__["vertex1"] = _genera.Face_vertex1_get
    if _newclass:vertex1 = _swig_property(_genera.Face_vertex1_get, _genera.Face_vertex1_set)
    __swig_setmethods__["vertex2"] = _genera.Face_vertex2_set
    __swig_getmethods__["vertex2"] = _genera.Face_vertex2_get
    if _newclass:vertex2 = _swig_property(_genera.Face_vertex2_get, _genera.Face_vertex2_set)
    __swig_setmethods__["vertex3"] = _genera.Face_vertex3_set
    __swig_getmethods__["vertex3"] = _genera.Face_vertex3_get
    if _newclass:vertex3 = _swig_property(_genera.Face_vertex3_get, _genera.Face_vertex3_set)
    __swig_setmethods__["twoSided"] = _genera.Face_twoSided_set
    __swig_getmethods__["twoSided"] = _genera.Face_twoSided_get
    if _newclass:twoSided = _swig_property(_genera.Face_twoSided_get, _genera.Face_twoSided_set)
    def __init__(self): 
        this = _genera.new_Face()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genera.delete_Face
    __del__ = lambda self : None;
Face_swigregister = _genera.Face_swigregister
Face_swigregister(Face)

class Model(Component):
    __swig_setmethods__ = {}
    for _s in [Component]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    for _s in [Component]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _genera.new_Model()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genera.delete_Model
    __del__ = lambda self : None;
    def setGenerator(self, *args): return _genera.Model_setGenerator(self, *args)
    def loadData(self, *args): return _genera.Model_loadData(self, *args)
    def generate(self): return _genera.Model_generate(self)
    def precalculate(self): return _genera.Model_precalculate(self)
    def getNumberOfVertices(self): return _genera.Model_getNumberOfVertices(self)
    def setNumberOfVertices(self, *args): return _genera.Model_setNumberOfVertices(self, *args)
    def getVertex(self): return _genera.Model_getVertex(self)
    def setVertex(self, *args): return _genera.Model_setVertex(self, *args)
    def getVertexNormal(self): return _genera.Model_getVertexNormal(self)
    def setVertexNormal(self, *args): return _genera.Model_setVertexNormal(self, *args)
    def getVertexUV(self): return _genera.Model_getVertexUV(self)
    def setVertexUV(self, *args): return _genera.Model_setVertexUV(self, *args)
    def getMin(self): return _genera.Model_getMin(self)
    def getMax(self): return _genera.Model_getMax(self)
    def getCenter(self): return _genera.Model_getCenter(self)
    def getNumberOfFaces(self): return _genera.Model_getNumberOfFaces(self)
    def setNumberOfFaces(self, *args): return _genera.Model_setNumberOfFaces(self, *args)
    def getFace(self): return _genera.Model_getFace(self)
    def setFace(self, *args): return _genera.Model_setFace(self, *args)
    def getFaceNormal(self): return _genera.Model_getFaceNormal(self)
    def setFaceNormal(self, *args): return _genera.Model_setFaceNormal(self, *args)
    def getTextureMap(self): return _genera.Model_getTextureMap(self)
    def setTextureMap(self, *args): return _genera.Model_setTextureMap(self, *args)
    def getEnvironmentMap(self): return _genera.Model_getEnvironmentMap(self)
    def setEnvironmentMap(self, *args): return _genera.Model_setEnvironmentMap(self, *args)
    def getTextureMapped(self): return _genera.Model_getTextureMapped(self)
    def setTextureMapped(self, *args): return _genera.Model_setTextureMapped(self, *args)
    def getEnvironmentMapped(self): return _genera.Model_getEnvironmentMapped(self)
    def setEnvironmentMapped(self, *args): return _genera.Model_setEnvironmentMapped(self, *args)
    def cube(self, *args): return _genera.Model_cube(self, *args)
    def cylinder(self, *args): return _genera.Model_cylinder(self, *args)
    def heightField(self, *args): return _genera.Model_heightField(self, *args)
    def octahedron(self, *args): return _genera.Model_octahedron(self, *args)
    def sphere(self, *args): return _genera.Model_sphere(self, *args)
    def star(self, *args): return _genera.Model_star(self, *args)
    def torus(self, *args): return _genera.Model_torus(self, *args)
    def heightMap(self, *args): return _genera.Model_heightMap(self, *args)
    def moveObject(self, *args): return _genera.Model_moveObject(self, *args)
    def noise(self, *args): return _genera.Model_noise(self, *args)
    def refine(self, *args): return _genera.Model_refine(self, *args)
    def rotateObject(self, *args): return _genera.Model_rotateObject(self, *args)
    def scaleObject(self, *args): return _genera.Model_scaleObject(self, *args)
    def spherize(self, *args): return _genera.Model_spherize(self, *args)
    def taper(self, *args): return _genera.Model_taper(self, *args)
    def tessellate(self, *args): return _genera.Model_tessellate(self, *args)
    def twistObject(self, *args): return _genera.Model_twistObject(self, *args)
    def environment(self, *args): return _genera.Model_environment(self, *args)
    def texture(self, *args): return _genera.Model_texture(self, *args)
    def draw(self, *args): return _genera.Model_draw(self, *args)
Model_swigregister = _genera.Model_swigregister
Model_swigregister(Model)

class Genera(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Genera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Genera, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _genera.new_Genera()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _genera.delete_Genera
    __del__ = lambda self : None;
    def load(self, *args): return _genera.Genera_load(self, *args)
    def getComponent(self, *args): return _genera.Genera_getComponent(self, *args)
    def generateTexture(self, *args): return _genera.Genera_generateTexture(self, *args)
    def generateAll(self): return _genera.Genera_generateAll(self)
    def loadPy(self, *args): return _genera.Genera_loadPy(self, *args)
    def getTextureLayer(self, *args): return _genera.Genera_getTextureLayer(self, *args)
    def getTextureLayerWidth(self, *args): return _genera.Genera_getTextureLayerWidth(self, *args)
    def getTextureLayerHeight(self, *args): return _genera.Genera_getTextureLayerHeight(self, *args)
    def getRenderedModel(self, *args): return _genera.Genera_getRenderedModel(self, *args)
Genera_swigregister = _genera.Genera_swigregister
Genera_swigregister(Genera)

# This file is compatible with both classic and new-style classes.


